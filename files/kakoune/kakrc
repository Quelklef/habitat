
## == Colors == ##

# Default colorscheme
colorscheme tomorrow-night

# This file gets programmatically overwritten overwrite the color scheme
#
# Note: Writing to this file will only affect the color scheme of newly-created kak
# sessions. To get existing sessions to load the new color scheme, you have to manually
# tell them to with something like:
# $ kak -l | while read sess; do echo 'source /path/to/the/file.kak' | kak -p $sess; done
evaluate-commands %sh{
  targ=~/.config/kak/current-color-scheme.kak
  [ -e "$targ" ] && echo source "$targ" || echo nop
}

# Inherit text+background color from terminal
# In particular this inherits background transparency!
set-face global Default default,default


## == Settings == ##

# Use a cat instead of clippy
set global ui_options ncurses_assistant=cat

# Set indentation to 2 spaces
set global indentwidth 2
set global tabstop 2

# Use spaces, not tabs
hook global InsertChar \t %{
  execute-keys -draft h@
}
hook global InsertDelete ' ' %{ try %{
  execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
} }

# When scrolling, keep some rows+columns visible around the cursor
set global scrolloff 5,5

# Use a safer (but slower) method for writing to files
set global writemethod replace

# Wait this many milliseconds before suggesting autocompletions, etc
set global idle_timeout 100

# Wrap lines
add-highlighter global/wrapping wrap -word -indent -marker "â€¦"

# Show line numbers
add-highlighter global/line-numbers number-lines

# Show trailing whitespace in red
add-highlighter global/show-trailing-whitespaces regex '\h+$' 0:Error

# Highlight the cursor column
source /per/config/files/kakoune/crosshairs.kak
cursorcolumn

# Initialize the LSP client
#evaluate-commands %sh{ kak-lsp --kakoune --session "$kak_session" }
#set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
#lsp-enable


## == Keybindings == ##

# On space, deselect all but the last character of the current selection
map global normal <space> ,

# Use <a-y> and <a-Y> to yank to system clipboard
map global normal <a-y> 'y:nop %sh{ printf %s "$kak_main_reg_dquote" | xsel --input --clipboard }<ret>:echo "Yanked to system clipboard"<ret>'
map global normal <a-Y> 'Y:nop %sh{ printf %s "$kak_main_reg_dquote" | xsel --input --clipboard }<ret>:echo "Yanked to system clipboard"<ret>'

# Paste from system clipboard
map global normal <a-p> ':reg x %sh{ xsel --output --clipboard }<ret>"xp:echo "Pasted from system clipboard"<ret>'
map global normal <a-P> ':reg x %sh{ xsel --output --clipboard }<ret>"xP:echo "Pasted from system clipboard"<ret>'

# On non-system paste, do not select pasted content
map global normal p \"pZp\"pz
map global normal P \"pZP\"pz

# Center screen after z, n, <a-n>, N, <a-N>
map global normal z zvc
map global normal n nvc
map global normal <a-n> <a-n>vc
map global normal N Nvc
map global normal <a-N> <a-N>vc

# Remap object-selection to the more convenient w and W
map global normal w <a-i>
map global normal W <a-a>

# Have 'r' be 'reverse' and ',' be 'replace'
map global normal r <semicolon>
map global normal , r

# use <a-s> to split on newline then drop blank lines
map global normal <a-s> s\n<ret>hs[^\n]<ret>l

# extend selection with X
map global normal X Jx

# <a-l> to rewrite current line
# <a-L> to rewrite line from cursor
map global normal <a-l> <semicolon>giGlc
map global normal <a-L> <semicolon>Glc


# == Filetype-specific options == #

# For python, set indentation to 4 spaces
hook global WinSetOption filetype=python %{
  set buffer indentwidth 4
  set buffer tabstop 4
}

# Detect .envrc and bashrc as bash
hook global BufCreate .*\.envrc %{ set buffer filetype sh }
hook global BufCreate .*bashrc %{ set buffer filetype sh }

# Detect .purs (Purescript) as haskell
hook global BufCreate .*\.purs %{ set buffer filetype purescript }

# Detect .ejs (Embedded Javascript) as HTML
hook global BufCreate .*\.ejs %{ set buffer filetype html }

# Recognize "-- $> EXPR" GHCiD syntax; see [1]
# This implementation only works okay. Oh well. I'm pressed for time ATM.
# [1]: <https://github.com/ndmitchell/ghcid/tree/b7dc5c4ee640b6c8137ecfd0a2b50df278015221#evaluation>
hook global WinSetOption filetype=haskell %{
  # Replace the standard line-comment highlighter [2] with one that will end prematurely if it sees '$>'
  # This way, after it ends, the rest of the line will be highlighted as code.
  remove-highlighter shared/haskell/line_comment
  add-highlighter shared/haskell/line_comment region '--(?![!#$%&*+./<>?@\\\^|~=])' '$|\$>' fill comment
  # [2]: <https://github.com/mawww/kakoune/blob/be82047dbf5f74f123e925b96e0e13962a4e0c09/rc/filetype/haskell.kak#L42>
}

